// A fake API function that returns data after a delay
const fetchUserData = () => {
  return new Promise((resolve, reject) => {
    console.log("Fetching user data from server...");
    // Simulate delay (like an API call)
    setTimeout(() => {
      const success = true; // Change to false to simulate an error
      if (success) {
        resolve({
          name: "Prasanna",
          age: 23,
          city: "Trichy"
        });
      } else {
        reject("Failed to fetch user data!");
      }
    }, 2000); // 2 seconds delay
  });
};
// Async function using await
const getUserData = async () => {
  try {
    const user = await fetchUserData(); // Wait until Promise resolves
    console.log("User data received:", user);
  } catch (error) {
    console.error(error);
  }
};
// Call the function
getUserData();
console.log("Request sent... Waiting for response...");
